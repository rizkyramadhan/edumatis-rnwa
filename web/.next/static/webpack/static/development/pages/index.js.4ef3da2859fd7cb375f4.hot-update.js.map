{"version":3,"file":"static/webpack/static/development/pages/index.js.4ef3da2859fd7cb375f4.hot-update.js","sources":["webpack:///./pages/app/libs/nav/NavContainer.tsx"],"sourcesContent":["import { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { toJS } from \"mobx\";\nconst container = (routes: any) => {\n  const routeStack: any[] = [];\n  let navParam: any = {};\n  return observer(\n    (props: any, ref: any) => {\n      let screenRef = useRef(null);\n      let current = useObservable({\n        name: \"\"\n      });\n      if (current.name === \"\") {\n        Object.keys(routes).map((r: any, index: number) => {\n          if (index === 0) {\n            current.name = r;\n            screenRef.current = routes[r].screen;\n          }\n        });\n      }\n      const navigation = {\n        _routes: routes,\n        getParam: function(key: string) {\n          return navParam[key];\n        },\n        dangerouslyGetParent: function() {\n          return props.parentNavigation;\n        },\n        goBack: function() {\n          if (routeStack.length > 0) {\n            const screen = routeStack.pop();\n            if (routes[screen.name]) {\n              navParam = screen.data;\n              screenRef.current = routes[screen.name].screen;\n              current.name = screen.name;\n            }\n          }\n        },\n        navigate: function(screen: string, data: any) {\n          routeStack.push({ name: current.name, data: toJS(navParam) });\n          if (routes[screen]) {\n            navParam = data;\n            screenRef.current = routes[screen].screen;\n            current.name = screen;\n          }\n        },\n        replace: function(screen: string) {\n          if (routes[screen]) {\n            screenRef.current = routes[screen].screen;\n            current.name = screen;\n          }\n        },\n        popToTop: function() {\n          if (props.parentNavigation) {\n            props.parentNavigation.popToTop();\n          } else {\n            let first = Object.keys(routes)[0];\n            current.name = first;\n            screenRef.current = routes[first].screen;\n          }\n        }\n      };\n      const Component: any = screenRef.current;\n      if (ref && ref.current) {\n        ref.current = navigation;\n      }\n\n      return <Component {...props} navigation={navigation} />;\n    },\n    { forwardRef: true }\n  );\n};\n\nexport default (data: any) => {\n  return container(data);\n};\n\nexport const createNavigateTo = function(navigation: any) {\n  return function(screen: string) {\n    navigation.replace(screen);\n    if (navigation.closeDrawer) navigation.closeDrawer();\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAxCA;AA0CA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}