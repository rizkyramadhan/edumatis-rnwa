{"version":3,"file":"static/webpack/static/development/pages/index.js.2f4ab12b1d98c9d4a6b5.hot-update.js","sources":["webpack:///./pages/app/libs/queries/crud/updateRecord.ts"],"sourcesContent":["import config from \"@app/config\";\nimport { checkSession } from \"../user/checkSession\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  primaryKey?: string;\n}\n\nexport default async (table: string, data: any, options?: opts) => {\n  const opt = {\n    ...{ useSession: true, debug: false, primaryKey: \"id\" },\n    ...options\n  };\n\n  const _data = { ...data };\n  delete _data[opt.primaryKey];\n\n  const pk =\n    typeof data[opt.primaryKey] === \"string\"\n      ? `\"${data[opt.primaryKey]}\"`\n      : data[opt.primaryKey];\n\n  const gql = `mutation update($data:${table}_set_input!) {\n    update_${table}(\n      where: {${opt.primaryKey}: {_eq: ${pk}}},\n      _set: $data\n    ) {\n      returning {\n        ${opt.primaryKey}\n      }\n    }\n  }`;\n\n  if (opt && opt.debug) {\n    console.log(gql, data);\n  }\n\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n    if (!session) {\n      return false;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      operationName: \"update\",\n      query: gql,\n      variables: {\n        data: _data\n      }\n    }),\n    headers\n  });\n\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Create Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${JSON.stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n    return null;\n  }\n  return json;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAKA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AA9BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAiCA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AATA;AACA;AAzCA;AAwCA;AAxCA;AAAA;AACA;AADA;AAoDA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}