{"version":3,"file":"static/webpack/static/development/pages/index.js.445516a0683405892236.hot-update.js","sources":["webpack:///./pages/app/screens/siswa/Kewajiban/Kewajiban.tsx"],"sourcesContent":["import StackNav from \"@app/libs/nav/StackNav\";\nimport rawQuery from \"@app/libs/queries/crud/rawQuery\";\nimport { getSession } from \"@app/libs/queries/user/getsetSession\";\nimport UIBody from \"@app/libs/ui/UIBody\";\nimport UIContainer from \"@app/libs/ui/UIContainer\";\nimport UIHead from \"@app/libs/ui/UIHead\";\nimport UIList from \"@app/libs/ui/UIList\";\nimport UIListItem from \"@app/libs/ui/UIListItem\";\nimport dayjs from \"dayjs\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Text, View } from \"react-native\";\nimport KewajibanDetail from \"./KewajibanDetail\";\n\nconst Kewajiban = observer(({ navigation }: any) => {\n  const data = useObservable({\n    list: [],\n    loading: true\n  });\n  return (\n    <UIContainer>\n      <UIHead title=\"Kewajiban bulan ini\" navigation={navigation} />\n      <UIBody>\n        <UIList\n          data={data.list}\n          loading={data.loading}\n          render={(list: any) => {\n            const item = list.item;\n            return (\n              <UIListItem\n                onPress={() => {\n                  navigation.navigate(\"KewajibanDetail\", {\n                    item: item\n                  });\n                }}\n              >\n                <View>\n                  <Text\n                    style={{ fontSize: 15, fontWeight: \"bold\", color: \"#555\" }}\n                  >\n                    {item.nama_kewajiban}\n                  </Text>\n                  <Text style={{ fontSize: 14 }}>\n                    Rp {item.nominal.toLocaleString()} ({item.status})\n                  </Text>\n                </View>\n                <View>\n                  <Text>{item.tipe_pembayaran}</Text>\n                </View>\n              </UIListItem>\n            );\n          }}\n          reload={async () => {\n            const session = await getSession();\n            const kelasRaw = await rawQuery(`{\n              kelas_murid(where: {murid_id: {_eq: ${session.murid.id}}}) {\n                kelas_id\n              }\n            }`);\n\n            if (\n              kelasRaw &&\n              kelasRaw.kelas_murid &&\n              kelasRaw.kelas_murid.length > 0\n            ) {\n              const kelas = kelasRaw.kelas_murid.map((k: any) => {\n                return k.kelas_id.toString();\n              });\n              const monthStart = dayjs()\n                .startOf(\"month\")\n                .subtract(1, \"day\")\n                .format(\"YYYY-MM-DD\");\n              const monthEnd = dayjs()\n                .endOf(\"month\")\n                .add(1, \"day\")\n                .format(\"YYYY-MM-DD\");\n\n              const result = await rawQuery(\n                `{\n                kewajiban(order_by: [{tipe_pembayaran: asc}, {id: asc}], \n                  where: {kelas: {_has_keys_any: ${JSON.stringify(kelas)}}}) {\n                  id\n                  nama_kewajiban\n                  nominal\n                  tipe_pembayaran\n                  kelas\n                  transaksi(\n                    where: {\n                      kewajiban: {\n                        _or:[\n                          {_and:[\n                            {tipe_pembayaran:{_eq:\"Bulanan\"}},\n                            {transaksi: {\n                               _and:[\n                                {tstamp: {_gte: \"${monthStart}\"}},\n                                {tstamp: {_lte: \"${monthEnd}\"}},\n                              ] \n                            }}\n                          ]},\n                          {tipe_pembayaran:{_eq:\"Insidentil\"}}\n                        ]\n                      }\n                    }\n                  ) {\n                    id\n                    status\n                    tstamp\n                    detail\n                  }\n                }  \n              }`\n              );\n              data.list = result.kewajiban.map((item: any) => {\n                Object.keys(item.kelas).forEach((i: any) => {\n                  const k = item.kelas[i];\n                  if (k.nominal !== undefined) {\n                    item.nominal =  k.nominal;\n                  }\n                  k.murid.forEach((m: any) => {\n                    if (m && session.murid && m.id === session.murid.id) {\n                      if (m.nominal !== undefined) {\n                        item.nominal = m.nominal;\n                        console.log(item.nominal);\n                      }\n                    }\n                  });\n                });\n\n                item.status = item.nominal === 0 ? \"Lunas\" : \"Belum Lunas\";\n                item.transaksi.forEach((t: any) => {\n                  if (item.tipe_pembayaran === \"Insidentil\") {\n                    if (t.status === \"success\") {\n                      item.status = \"Lunas\";\n                    }\n                  } else {\n                    if (t.status === \"success\") {\n                      item.status = \"Lunas\";\n                    }\n                  }\n                });\n                console.log(item);\n\n                return item;\n              });\n            }\n\n            data.loading = false;\n          }}\n        />\n      </UIBody>\n    </UIContainer>\n  );\n});\n\nexport default StackNav({\n  Kewajiban: { screen: Kewajiban },\n  KewajibanDetail: { screen: KewajibanDetail }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAIA;AApBA;AAAA;AACA;AADA;AAyBA;AAmCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA5FA;AA8FA;AACA;AA/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiIA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;;;;A","sourceRoot":""}