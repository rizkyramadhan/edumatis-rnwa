{"version":3,"file":"static/webpack/static/development/pages/index.js.7a91b20ceaa52fb79737.hot-update.js","sources":["webpack:///./pages/app/screens/admin/Kelas/KelasPicker.tsx"],"sourcesContent":["import rawQuery from \"@app/libs/queries/crud/rawQuery\";\nimport UICol from \"@app/libs/ui/UICol\";\nimport UIField from \"@app/libs/ui/UIField\";\nimport UIFieldSelectNative from \"@app/libs/ui/UIFieldSelectNative\";\nimport UIRow from \"@app/libs/ui/UIRow\";\nimport { getUnique } from \"@app/libs/utils/GraphQL\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { toJS } from \"mobx\";\n\nexport default observer(\n  ({ form, renderMurid, renderKelas, renderKelasTitle }: any) => {\n    const data = useObservable({\n      expandKelas: [] as any,\n      kelas: [] as any,\n      kelasMurid: {} as any\n    });\n    useEffect(() => {\n      data.kelas = [];\n      rawQuery(`{\n        kelas {\n          id \n          nama_kelas\n        }\n      }`).then((res: any) => {\n        data.kelas = res.kelas;\n      });\n    }, []);\n\n    return (\n      <UIRow>\n        <UICol size={6} sizexs={12} sizesm={12} sizemd={12}>\n          <UIField label=\"Berlaku untuk kelas:\">\n            {data.kelas &&\n              toJS(data.kelas).map((k: any, index: number) => {\n                const allkelas = form.kelas || {};\n                const kelas = allkelas[k.id];\n                return (\n                  <View\n                    key={k.id}\n                    style={{\n                      borderBottomWidth:\n                        index + 1 === data.kelas.length ? 0 : 1,\n                      marginHorizontal: -12,\n                      padding: 5,\n                      paddingHorizontal: 12,\n                      borderBottomColor: \"#ddd\"\n                    }}\n                  >\n                    <TouchableOpacity\n                      onPress={async () => {\n                        if (!data.kelasMurid[k.id]) {\n                          let res: any = await rawQuery(`{\n                                murid(where: {kelas_murids: {kelas_id: {_eq: ${\n                                  k.id\n                                }}}}) {\n                                  id\n                                  nama_murid\n                                }\n                              }\n                              `);\n                          if (res && res.murid) {\n                            const kelasMurid = res.murid.map((m: any) => {\n                              return {\n                                value: m.id,\n                                label: m.nama_murid\n                              };\n                            });\n                            data.kelasMurid[k.id] = [\n                              { value: 0, label: \"\" },\n                              ...kelasMurid\n                            ];\n                          }\n                        }\n                        if (kelas) {\n                          data.expandKelas = [k.id];\n                        } else {\n                          allkelas[k.id] = {\n                            nominal: form.nominal,\n                            murid: [{}]\n                          };\n                          data.expandKelas = [k.id];\n                        }\n                      }}\n                    >\n                      <Text style={{ fontSize: 17, height: 25 }}>\n                        {kelas ? \"☑\" : \"☐\"}\n                        &nbsp;\n                        {k.nama_kelas}\n                      </Text>\n                    </TouchableOpacity>\n\n                    {kelas && (\n                      <View\n                        style={{\n                          flexDirection: \"row\",\n                          marginLeft: 30,\n                          alignItems: \"center\",\n                          position: \"absolute\",\n                          right: 10\n                        }}\n                      >\n                        {renderKelasTitle && renderKelasTitle(kelas, k)}\n                        <TouchableOpacity\n                          onPress={() => {\n                            allkelas[k.id] = undefined;\n                          }}\n                        >\n                          <Text style={{ color: \"red\" }}> Hapus</Text>\n                        </TouchableOpacity>\n                      </View>\n                    )}\n\n                    {kelas &&\n                      (data.expandKelas.indexOf(k.id) >= 0 && (\n                        <View>\n                          {renderKelas && renderKelas(kelas, k)}\n                          {kelas.murid.map((murid: any, midx: number) => {\n                            return (\n                              <UIRow\n                                key={midx}\n                                style={{ flexDirection: \"row\" }}\n                              >\n                                <UICol size={6}>\n                                  <UIFieldSelectNative\n                                    label=\"Murid\"\n                                    items={data.kelasMurid[k.id] || []}\n                                    value={murid.id || 0}\n                                    setValue={(value: any) => {\n                                      value = parseInt(value);\n                                      murid.id = value;\n\n                                      const unique = getUnique(\n                                        kelas.murid,\n                                        \"id\"\n                                      ).filter(m => {\n                                        return m.id !== 0;\n                                      });\n                                      kelas.murid.splice(0, kelas.murid.length);\n\n                                      unique.forEach(m => {\n                                        kelas.murid.push(m);\n                                      });\n                                      kelas.murid.push({ id: 0 });\n                                    }}\n                                  />\n                                </UICol>\n\n                                {renderMurid && renderMurid(murid, kelas, k)}\n                              </UIRow>\n                            );\n                          })}\n                        </View>\n                      ))}\n                  </View>\n                );\n              })}\n          </UIField>\n        </UICol>\n      </UIRow>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AANA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAvBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAKA;AAKA;;;;A","sourceRoot":""}